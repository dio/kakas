// Copyright 2022 Dhi Aurrahman
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"

	v1 "github.com/dio/kakas/generated/eventmetadata/v1"
)

var (
	eventMetadataTypeDescriptor = v1.E_EventMetadata.TypeDescriptor()
)

func main() {
	opts := protogen.Options{}
	opts.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + "_eventmetadata.gen.go"
	p := gen.NewGeneratedFile(filename, file.GoImportPath)
	protoEventMetadataIdent := protogen.GoIdent{
		GoName:       "EventMetadata",
		GoImportPath: "github.com/dio/kakas/generated/eventmetadata/v1",
	}
	protoEventMetadataTypeDescriptor := protogen.GoIdent{
		GoName:       "E_EventMetadata.TypeDescriptor()",
		GoImportPath: "github.com/dio/kakas/generated/eventmetadata/v1",
	}
	p.P("// Code generated by protoc-gen-eventmetadata. DO NOT EDIT.")
	p.P("package ", file.GoPackageName)
	var process func(messages []*protogen.Message)
	process = func(messages []*protogen.Message) {
		for _, message := range messages {
			// Skip maps in protos.
			if message.Desc.Options().(*descriptorpb.MessageOptions).GetMapEntry() {
				continue
			}

			// Extract the event metadata of a message.
			var metadata *v1.EventMetadata
			opts := message.Desc.Options().ProtoReflect()
			if opts.Has(eventMetadataTypeDescriptor) {
				v := opts.Get(eventMetadataTypeDescriptor)
				metadata = v.Message().Interface().(*v1.EventMetadata)
			}

			typeName := message.GoIdent.GoName
			// Generate EventMetadata() method for this type. We statically extract the information.
			p.P(`// EventMetadata returns event metadata of `, typeName, `.`)
			p.P(`func (x *`, typeName, `) EventMetadata() *`, protoEventMetadataIdent, `{`)
			if metadata != nil {
				p.P(`return &`, protoEventMetadataIdent, `{`)
				p.P(`Name:"`, metadata.GetName(), `",`)
				p.P(`ParentStream:"`, metadata.GetParentStream(), `",`)
				p.P(`LastEvent:`, metadata.GetLastEvent(), `,`)
				if len(metadata.PreviousTypeUrls) > 0 {
					p.P(`PreviousTypeUrls: []string{`)
					for _, typeURL := range metadata.PreviousTypeUrls {
						p.P(`"`, typeURL, `",`)
					}
					p.P(`},`)
				}
				p.P(`}`)
			} else {
				p.P(`return nil`)
			}
			p.P(`}`)
			process(message.Messages)
		}
	}
	// Write out globals.
	p.P(`var (`)
	p.P(`eventMetadataTypeDescriptor =`, protoEventMetadataTypeDescriptor)
	p.P(`)`)
	process(file.Messages)
}
