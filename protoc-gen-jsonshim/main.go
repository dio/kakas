// Copyright 2022 Dhi Aurrahman
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This is a fork of istio.io/tools/cmd/protoc-gen-jsonshim.

package main

import (
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
)

func main() {
	opts := protogen.Options{}
	opts.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + "_json.gen.go"
	p := gen.NewGeneratedFile(filename, file.GoImportPath)
	protoMarshalIdent := protogen.GoIdent{
		GoName:       "Marshal",
		GoImportPath: "google.golang.org/protobuf/encoding/protojson",
	}
	protoUnmarshal := protogen.GoIdent{
		GoName:       "Unmarshal",
		GoImportPath: "google.golang.org/protobuf/encoding/protojson",
	}
	p.P("// Code generated by protoc-gen-jsonshim. DO NOT EDIT.")
	p.P("package ", file.GoPackageName)
	var process func(messages []*protogen.Message)
	process = func(messages []*protogen.Message) {
		for _, message := range messages {
			// Skip maps in protos.
			if message.Desc.Options().(*descriptorpb.MessageOptions).GetMapEntry() {
				continue
			}

			typeName := message.GoIdent.GoName
			// Generate MarshalJSON() method for this type.
			p.P(`// MarshalJSON is a custom marshaler for`, typeName, `.`)
			p.P(`func (x *`, typeName, `) MarshalJSON()`, `([]byte, error) {`)
			p.P(`return `, protoMarshalIdent, `(x)`)
			p.P(`}`)

			// Generate UnmarshalJSON() method for this type.
			p.P(`// UnmarshalJSON is a custom marshaler for`, typeName, `.`)
			p.P(`func (x *`, typeName, `) UnmarshalJSON(b []byte) error`, `{`)
			p.P(`return `, protoUnmarshal, `(b, x)`)
			p.P(`}`)

			process(message.Messages)
		}
	}
	process(file.Messages)
}
